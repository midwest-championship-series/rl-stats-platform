service: rl-stats

plugins:
  - serverless-offline

package:
  exclude:
    - node_modules/**/aws-sdk/**
    - ./src/**/*.spec.*
    - .eslintrc*
    - .prettierrc*
    - .vscode*
    - README*
    - ./**/__tests__/**
    - .env

custom:
  keepWarm:
    prod: true
    notprod: false
  dbHost:
    notprod: mnrl-dev-7nmqy.mongodb.net
    prod: mnrl-7nmqy.mongodb.net
  playByPlayChannelId:
    notprod: '692994579305332806'
    prod: '872698617629143040'

provider:
  name: aws
  runtime: nodejs14.x
  profile: rl-stats
  region: ${opt:region, 'us-east-1'}
  stage: ${opt:stage, 'dev'}
  versionFunctions: false
  endpointType: REGIONAL
  memorySize: 256
  vpc:
    securityGroupIds:
      - ${cf:rl-stats-setup-prod.SecurityGroupId}
    subnetIds:
      - ${cf:rl-stats-setup-prod.PrivateSubNetA}
      - ${cf:rl-stats-setup-prod.PrivateSubNetB}
  environment:
    SERVERLESS_REGION: ${self:provider.region}
    SERVERLESS_STAGE: ${self:provider.stage}
    SERVERLESS_SERVICE: ${self:service}
    BALLCHASING_KEY: ${ssm:BALLCHASING_KEY}
    MNCS_STAT_SHEET_ID: ${ssm:${self:provider.stage}-MNCS_STAT_SHEET_ID}
    MNRL_SHEET_ID: ${ssm:${self:provider.stage}-MNRL_SHEET_ID}
    MONGODB_PASSWORD: ${ssm:${self:provider.stage}-mnrl-db-pass~true}
    MONGODB_HOST: ${self:custom.dbHost.${self:provider.stage}, self:custom.dbHost.notprod}
    MNRL_BOT_URL: https://rl-rank-bot.herokuapp.com
    ERROR_CHANNEL_ID: '692994579305332806'
    ELASTIC_HOST: ${ssm:${self:provider.stage}-mncs-elastic-host~true}
    PRODUCED_STATS_BUCKET: ${self:resources.Outputs.ProducedStatsBucketName.Value}
    LIVE_STATS_BUCKET: ${self:resources.Outputs.LiveStatsBucketName.Value}
    LIVE_STATS_CHANNEL_ID: ${self:custom.playByPlayChannelId.${self:provider.stage}, self:custom.playByPlayChannelId.notprod}
    GOOGLE_PROJECT_ID: mnrl-269717
    EVENT_BUS: ${self:resources.Outputs.RLStatsEventBus.Value}
    REPLAY_FILES_BUCKET: ${cf:rl-stats-setup-prod.ReplayBucket}
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - states:StartExecution
            - s3:*
            - dynamodb:*
            - rds:*
            - secretsmanager:GetSecretValue
            - events:PutEvents
            - events:RemoveTargets
            - lambda:InvokeFunction
          Resource:
            - '*'
        - Effect: Allow
          Action:
            - sqs:ListQueues
            - sqs:DeleteMessage
            - sqs:GetQueueUrl
            - sqs:ReceiveMessage
            - sqs:SendMessage
          Resource:
            - '*'
  apiGateway:
    usagePlan:
      - low:
          quota:
            limit: 10000
            offset: 2
            period: MONTH
          throttle:
            burstLimit: 10
            rateLimit: 5
      - high:
          throttle:
            burstLimit: 10
            rateLimit: 5
  eventBridge:
    useCloudFormation: true

functions:
  report-match:
    handler: lambdas/report-match.handler
    name: ${self:service}-report-match-${self:provider.stage}
    reservedConcurrency: 1
    memorySize: 6016
    timeout: 90
    events:
      - sqs:
          arn:
            Fn::GetAtt:
              - ReportMatchQueue
              - Arn
          batchSize: 1

  reprocess-games:
    handler: lambdas/reprocess-games.handler
    name: ${self:service}-reprocess-games-${self:provider.stage}
    timeout: 30
    events:
      - eventBridge:
          eventBus: !Ref RLStatsEventBus
          pattern:
            detail-type:
              - MATCH_REPROCESS

  process-match:
    handler: lambdas/process-match.handler
    name: ${self:service}-process-match-${self:provider.stage}
    timeout: 30
    reservedConcurrency: 1
    events:
      - sqs:
          arn:
            Fn::GetAtt:
              - GamesQueue
              - Arn
          batchSize: 1

  rest-api-versioned:
    handler: lambdas/rest-api.handler
    name: ${self:service}-rest-api-versioned-${self:provider.stage}
    timeout: 30
    memorySize: 1048
    events:
      - http:
          path: /
          method: any
          cors: true
          private: true
      - http:
          path: /{proxy+}
          method: any
          cors: true
          private: true
      - schedule:
          rate: rate(10 minutes)
          enabled: ${self:custom.keepWarm.${self:provider.stage}, self:custom.keepWarm.notprod}
          input:
            type: warmer

  migrate:
    handler: lambdas/migrate.handler
    name: ${self:service}-migrate-${self:provider.stage}
    timeout: 300

  adjust-data:
    handler: lambdas/adjust-data.handler
    name: ${self:service}-adjust-data-${self:provider.stage}
    timeout: 300
    events:
      - schedule: cron(0 0 * * ? *)

  index-elastic:
    handler: lambdas/index-elastic.handler
    name: ${self:service}-index-elastic-${self:provider.stage}
    timeout: 300
    events:
      - eventBridge:
          eventBus: !Ref RLStatsEventBus
          pattern:
            detail-type:
              - MATCH_PROCESS_ENDED

  index-bigquery:
    handler: lambdas/index-bigquery.handler
    name: ${self:service}-index-bigquery-${self:provider.stage}
    timeout: 300
    events:
      - eventBridge:
          eventBus: !Ref RLStatsEventBus
          pattern:
            detail-type:
              - MATCH_PROCESS_ENDED

  sync-bigquery:
    handler: lambdas/sync-bigquery.handler
    name: ${self:service}-sync-bigquery-${self:provider.stage}
    timeout: 300

  live-game-events:
    handler: lambdas/live-game-events.handler
    name: ${self:service}-live-game-events-${self:provider.stage}
    timeout: 30
    events:
      - eventBridge:
          eventBus: !Ref RLStatsEventBus
          pattern:
            detail-type:
              - LIVE_GAME_EVENTS

  remove-teams:
    handler: lambdas/manual/remove-teams.handler
    name: ${self:service}-remove-teams-${self:provider.stage}

resources:
  Resources:
    GamesQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: ${self:service}-process-games-queue-${self:provider.stage}
        DelaySeconds: 0
        MessageRetentionPeriod: 345600
        ReceiveMessageWaitTimeSeconds: 20
        VisibilityTimeout: 120
    ReportMatchQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: ${self:service}-download-replays-queue-${self:provider.stage}
        DelaySeconds: 0
        MessageRetentionPeriod: 345600
        ReceiveMessageWaitTimeSeconds: 20
        VisibilityTimeout: 120
    StatsBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:service}-produced-stats-${self:provider.stage}-${self:provider.region}
        LifecycleConfiguration:
          Rules:
            - ExpirationInDays: 1
              Status: Enabled
    LiveStatsBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:service}-live-stats-${self:provider.stage}-${self:provider.region}
        LifecycleConfiguration:
          Rules:
            - ExpirationInDays: 1
              Status: Enabled
    RLStatsEventBus:
      Type: AWS::Events::EventBus
      Properties:
        Name: ${self:service}-${self:provider.stage}
    ForfeitMatchRule:
      Type: AWS::Events::Rule
      Properties:
        Description: Indicates that a forfeit was reported
        EventBusName: ${self:resources.Outputs.RLStatsEventBus.Value}
        EventPattern:
          detail-type:
            - MATCH_PROCESS_FORFEIT_REPORTED
        Targets:
          - Arn: !GetAtt GamesQueue.Arn
            InputPath: $.detail
            Id: SQSqueue
    ProcessMatchRule:
      Type: AWS::Events::Rule
      Properties:
        Description: Process match after game data has been retrieved
        EventBusName: ${self:resources.Outputs.RLStatsEventBus.Value}
        EventPattern:
          detail-type:
            - MATCH_PROCESS_INIT
        Targets:
          - Arn: !GetAtt GamesQueue.Arn
            InputPath: $.detail
            Id: SQSqueue
    ReportMatchRule:
      Type: AWS::Events::Rule
      Properties:
        Description: Indicates that a match has been reported
        EventBusName: ${self:resources.Outputs.RLStatsEventBus.Value}
        EventPattern:
          detail-type:
            - MATCH_PROCESS_GAMES_REPORTED
        Targets:
          - Arn: !GetAtt ReportMatchQueue.Arn
            InputPath: $.detail
            Id: SQSqueue
    EventBridgeToSqsPolicy:
      Type: AWS::SQS::QueuePolicy
      Properties:
        PolicyDocument:
          Statement:
            - Effect: Allow
              Principal:
                Service: events.amazonaws.com
              Action: SQS:SendMessage
              Resource:
                - Fn::GetAtt:
                    - GamesQueue
                    - Arn
                - Fn::GetAtt:
                    - ReportMatchQueue
                    - Arn
        Queues:
          - Ref: GamesQueue
          - Ref: ReportMatchQueue
  Outputs:
    GamesQueue:
      Value:
        Ref: GamesQueue
    ProducedStatsBucketName:
      Value:
        Ref: StatsBucket
    LiveStatsBucketName:
      Value:
        Ref: LiveStatsBucket
    RLStatsEventBus:
      Value:
        Ref: RLStatsEventBus
    RLStatsEventBusArn:
      Value:
        Fn::GetAtt:
          - RLStatsEventBus
          - Arn
