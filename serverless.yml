service: rl-stats

plugins:
  - serverless-python-requirements
  - serverless-step-functions
  - serverless-offline

package:
  exclude:
    - node_modules/**/aws-sdk/**
    - ./src/**/*.spec.*
    - test
    - .eslintrc*
    - .prettierrc*
    - .vscode*
    - README*
    - __test__/**
    - temp/**

custom:
  pythonRequirements:
    dockerizePip: true
    usePipenv: true
    # useDownloadCache: false
    # useStaticCache: false

provider:
  name: aws
  runtime: python3.6
  profile: personal
  region: ${opt:region, 'us-east-1'}
  stage: ${opt:stage, 'dev'}
  environment:
    SERVERLESS_REGION: ${self:provider.region}
    SERVERLESS_STAGE: ${self:provider.stage}
    BALLCHASING_KEY: ${ssm:BALLCHASING_KEY}
    MNCS_STAT_SHEET_ID: ${ssm:${self:provider.stage}-MNCS_STAT_SHEET_ID}
    MNRL_SHEET_ID: ${ssm:${self:provider.stage}-MNRL_SHEET_ID}
    MATCH_STATE_MACHINE_ARN: ${self:resources.Outputs.MatchPollerArn.Value}
  iamRoleStatements:
    - Effect: Allow
      Action:
        - states:StartExecution
        - s3:*
        - dynamodb:*
      Resource:
        - '*'
  usagePlan:
    quota:
      limit: 10000
      offset: 2
      period: MONTH
    throttle:
      burstLimit: 10
      rateLimit: 5

functions:
  # analyzes a replay file and produces its stats
  process-game:
    handler: lambdas/process-game.handler
    name: ${self:service}-process-game-${self:provider.stage}
    memorySize: 3008
    timeout: 10

  # fetches a player's ranks via https://rocketleague.tracker.network/
  fetch-ranks:
    handler: lambdas/fetch-ranks.handler
    name: ${self:service}-fetch-ranks-${self:provider.stage}
    runtime: nodejs10.x
    events:
      - http:
          path: /ranks/{platform}/{platformId}
          method: get
          cors: true
          request:
            parameters:
              path:
                platform: true
                platformId: true

  # see query parameter options here https://ballchasing.com/doc/api#replays
  fetch-games:
    handler: lambdas/fetch-games.handler
    name: ${self:service}-fetch-games-${self:provider.stage}
    runtime: nodejs10.x
    events:
      - http:
          path: /games
          method: get
          cors: true

  report-games:
    handler: lambdas/report-games.handler
    name: ${self:service}-report-games-${self:provider.stage}
    runtime: nodejs10.x
    timeout: 30
    events:
      - http:
          path: /games/_report
          method: post
          cors: true

  rest-api:
    handler: lambdas/rest-api.handler
    name: ${self:service}-rest-api-${self:provider.stage}
    runtime: nodejs10.x
    events:
      - http:
          path: /api/{table}
          method: get
          cors: true
      - http:
          path: /api/{table}
          method: put
          cors: true
  
  init-step-function:
    handler: lambdas/init-step-function.handler
    name: ${self:service}-init-step-function-${self:provider.stage}
    runtime: nodejs10.x

stepFunctions:
  stateMachines:
    MatchReader:
      name: MatchPoller-${self:provider.stage}
      definition:
        StartAt: retrieve-match-results
        States:
          retrieve-match-results:
            Type: Task
            # Next: is-match-closed
            End: true
            Resource:
              Fn::Join:
                - ":"
                - - arn:aws:lambda
                  - Ref: 'AWS::Region'
                  - Ref: 'AWS::AccountId'
                  - function:${self:service}-fetch-games-${self:provider.stage}
            TimeoutSeconds: 300
          # is-match-closed:
          #   Type: Choice
          #   Choices:
          #     - Variable: $.closed
          #         NumericGreaterThan: 0
          #         Next: save-match-results

resources:
  Outputs:
    MatchPollerArn:
      Description: The arn for the match polling state machine
      Value:
        Ref: MatchPollerDash${self:provider.stage} # Dash is used to replace '-' in local state machine name
  Resources:
    AuthTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: auth-table-${self:provider.stage}
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH