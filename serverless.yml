service: rl-stats

plugins:
  # - serverless-python-requirements
  # - serverless-export-env
  # - serverless-dotenv-plugin
  - serverless-step-functions
  - serverless-offline

package:
  exclude:
    - node_modules/**/aws-sdk/**
    - ./src/**/*.spec.*
    - test
    - .eslintrc*
    - .prettierrc*
    - .vscode*
    - README*
    - __test__/**
    - temp/**
    - .env

custom:
  keepWarm:
    prod: true
    notprod: false
  dbHost:
    notprod: mnrl-dev-7nmqy.mongodb.net
    prod: mnrl-7nmqy.mongodb.net

provider:
  name: aws
  runtime: nodejs12.x
  profile: rl-stats
  region: ${opt:region, 'us-east-1'}
  stage: ${opt:stage, 'dev'}
  versionFunctions: false
  endpointType: REGIONAL
  memorySize: 256
  vpc:
    securityGroupIds:
      - ${cf:rl-stats-setup-prod.SecurityGroupId}
    subnetIds:
      - ${cf:rl-stats-setup-prod.PrivateSubNetA}
      - ${cf:rl-stats-setup-prod.PrivateSubNetB}
  environment:
    SERVERLESS_REGION: ${self:provider.region}
    SERVERLESS_STAGE: ${self:provider.stage}
    SERVERLESS_ACCOUNT_ID:
      Ref: AWS::AccountId
    BALLCHASING_KEY: ${ssm:BALLCHASING_KEY}
    MNCS_STAT_SHEET_ID: ${ssm:${self:provider.stage}-MNCS_STAT_SHEET_ID}
    MNRL_SHEET_ID: ${ssm:${self:provider.stage}-MNRL_SHEET_ID}
    GAMES_QUEUE_URL:
      Ref: GamesQueue
    MONGODB_PASSWORD: ${ssm:${self:provider.stage}-mnrl-db-pass~true}
    MONGODB_HOST: ${self:custom.dbHost.${self:provider.stage}, self:custom.dbHost.notprod}
    MNRL_BOT_URL: https://rl-rank-bot.herokuapp.com
    ERROR_CHANNEL_ID: '692994579305332806'
    ELASTIC_HOST: ${ssm:${self:provider.stage}-mnrl-elastic-host~true}
  iamRoleStatements:
    - Effect: Allow
      Action:
        - states:StartExecution
        - s3:*
        - dynamodb:*
        - rds:*
      Resource:
        - '*'
    - Effect: Allow
      Action:
        - sqs:ListQueues
        - sqs:DeleteMessage
        - sqs:GetQueueUrl
        - sqs:ReceiveMessage
        - sqs:SendMessage
      Resource:
        - '*'
    - Effect: Allow
      Action:
        - secretsmanager:GetSecretValue
      Resource: 
        - '*'
  usagePlan:
    quota:
      limit: 10000
      offset: 2
      period: MONTH
    throttle:
      burstLimit: 10
      rateLimit: 5
  stackTags:
    Project: rl-stats
    Role: ${self:service}

functions:
  # fetches a player's ranks via https://rocketleague.tracker.network/
  fetch-ranks:
    handler: lambdas/fetch-ranks.handler
    name: ${self:service}-fetch-ranks-${self:provider.stage}
    events:
      - http:
          path: /ranks/{platform}/{platformId}
          method: get
          cors: true
          request:
            parameters:
              path:
                platform: true
                platformId: true

  report-games:
    handler: lambdas/report-games.handler
    name: ${self:service}-report-games-${self:provider.stage}
    timeout: 30
    events:
      - http:
          path: /platform/games/_report
          method: post
          private: true
          cors: true

  reprocess-games:
    handler: lambdas/reprocess-games.handler
    name: ${self:service}-reprocess-games-${self:provider.stage}
    timeout: 30
    events:
      - http:
          path: /platform/{collection}/_reprocess
          method: post
          private: true
          cors: true
          request:
            parameters:
              path:
                collection: true
  
  process-match:
    handler: lambdas/process-match.handler
    name: ${self:service}-process-match-${self:provider.stage}
    timeout: 30
    reservedConcurrency: 1
    events:
      - sqs:
          arn:
            Fn::GetAtt:
              - GamesQueue
              - Arn
          batchSize: 1

  authorize:
    handler: lambdas/authorize.handler
    name: ${self:service}-authorize-${self:provider.stage}

  rest-api-versioned:
    handler: lambdas/rest-api.handler
    name: ${self:service}-rest-api-versioned-${self:provider.stage}
    timeout: 30
    events:
      - http:
          path: /
          method: any
          cors: true
          private: true
      - http:
          path: /{proxy+}
          method: any
          cors: true
          private: true
      - schedule:
          rate: rate(10 minutes)
          enabled: ${self:custom.keepWarm.${self:provider.stage}, self:custom.keepWarm.notprod}
          input:
            type: warmer
  
  init-step-function:
    handler: lambdas/init-step-function.handler
    name: ${self:service}-init-step-function-${self:provider.stage}

  migrate:
    handler: lambdas/migrate.handler
    name: ${self:service}-migrate-${self:provider.stage}
    timeout: 300
  
  adjust-data:
    handler: lambdas/adjust-data.handler
    name: ${self:service}-adjust-data-${self:provider.stage}
    timeout: 300
    events:
      - schedule: cron(0 0 * * ? *)

resources:
  Resources:
    AuthTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: auth-table-${self:provider.stage}
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
    GamesQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: ${self:service}-process-games-queue-${self:provider.stage}
        DelaySeconds: 0
        MessageRetentionPeriod: 345600
        ReceiveMessageWaitTimeSeconds: 20
        VisibilityTimeout: 40
  Outputs:
    GamesQueue:
      Value:
        Ref: GamesQueue